/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    id("io.ktor.plugin") version "2.3.9"

    // kotlin("jvm") version "1.9.23"
    kotlin("plugin.serialization") version "1.9.23"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
    
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {


    implementation("io.ktor:ktor-server-core:2.3.9")
    implementation("io.ktor:ktor-server-netty:2.3.9")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    // implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")

    implementation("io.ktor:ktor-server-content-negotiation:2.3.9")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.9")

    // implementation("io.ktor:ktor-server-request-validation:2.3.9")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "appkt.AppKt"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


tasks.jar {
    // this line is telling compiler main file inside the Jar file
    manifest {
        attributes["Main-Class"] = "appkt.AppKt"
    } 
            //main source has to be included in jar file
        from(sourceSets.main.get().output) 
            // source code is depends on the confgured classpathes
        dependsOn(configurations.runtimeClasspath) 
            // this is finding jar file from the dependencies and find ziptrees which represent content of Jar file
        from({
            configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
        })
            // this line make sure that if there is duplicated config file in different dependencies, only one file will be included in Jar so that it won't be duplicated
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE 
    
}